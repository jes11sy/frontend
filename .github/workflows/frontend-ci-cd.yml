name: 🚀 Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # 🏗️ Сборка
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Production build
        run: npm run build

      - name: 📊 Build info
        run: |
          echo "✅ Build completed!"
          ls -la dist/
          echo "📦 Bundle size:"
          du -sh dist/*

      - name: 📦 Upload build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 7

  # 🚀 Deploy staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Download build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./dist

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging subdirectory..."
          echo "📁 Files to deploy:"
          ls -la dist/
          
          # Deploy files to staging subdirectory
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./dist/ \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/var/www/staging/
          
          echo "✅ Staging deploy completed!"

  # 🌟 Deploy production  
  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./dist

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: 🌟 Deploy to production
        run: |
          echo "🌟 Deploying to https://lead-schem.ru..."
          echo "📁 Files to deploy:"
          ls -la dist/
          
          # Deploy files via rsync to nginx html directory
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./dist/ \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/var/www/html/
          
          # Update nginx config for SPA support
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            nginx.conf \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/lead-schem.ru.conf
          
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} \
            "sudo cp /tmp/lead-schem.ru.conf /etc/nginx/sites-available/lead-schem.ru && \
             sudo ln -sf /etc/nginx/sites-available/lead-schem.ru /etc/nginx/sites-enabled/lead-schem.ru && \
             sudo rm -f /etc/nginx/sites-enabled/default && \
             sudo nginx -t && \
             sudo systemctl reload nginx"
          
          echo "✅ Deploy and nginx config updated successfully!"

      - name: 🔍 Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 5  # Wait for server to process files
          
          # Check if site is accessible
          if curl -f -s -I https://lead-schem.ru > /dev/null; then
            echo "✅ Site is accessible at https://lead-schem.ru"
          else
            echo "❌ Site verification failed"
            exit 1
          fi
          
      - name: 🎉 Success notification
        run: |
          echo "✅ Frontend deployed to production!"
          echo "🌐 HTTPS URL: https://lead-schem.ru"
          echo "🔐 SSL enabled with security headers"
          echo "🚀 API: https://api.lead-schem.ru"
          echo "📁 Deployed to: /var/www/html/"

      - name: 📢 Telegram notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="✅ Frontend успешно задеплоен!%0A🌐 Site: https://lead-schem.ru%0A🚀 API: https://api.lead-schem.ru"
          else
            MESSAGE="❌ Ошибка деплоя frontend!%0A🔗 Логи: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=HTML" || echo "Telegram notification failed" 